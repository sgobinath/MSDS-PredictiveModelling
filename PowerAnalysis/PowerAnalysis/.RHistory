?pwr
library(pwr)
? pwr
?pwr.t2n.test
cohen.ES(test = "t2n", size = "large")
pwr.t2n.test(d =  0.8, sig.level = 0.05, power = 0.8, alternative = "two.sided")
pwr.t2n.test(n1 = 500, d =  0.8, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis -> pwr.t2n.test(n1 = 500, d = 0.8, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.8, sig.level = 0.05, power = 0.8, alternative = "two.sided")
plot(power_analysis)
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.5, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "greater")
power_analysis
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "less")
cohen.ES("t", "snall")
cohen.ES(test = "t", size = "small")
cohen.ES(test = "t", size = "large")
cohen.ES(test = "t", size = "large")$effect.size
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "greater")
power_analysis
cohen.ES(test = "t", size = "small")$effect.size
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.5, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.8, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis
plot(power_analysis)
?pwr.anova.test
cohen.ES(test = "anov", size = "small")
cohen.ES(test = "anov", size = "large")
power_analysis <- pwr.anova.test(k = 2, f = 0.4, sig.level = 0.05, power = 0.8)
power_analysis
plot(power_analysis)
power_analysis <- pwr.t2n.test(n1 = 100, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "two.sided")
library(pwr)
power_analysis <- pwr.t2n.test(n1 = 500, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "greater")
power_analysis <- pwr.t2n.test(n1 = 100, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis <- pwr.t2n.test(n1 = 300, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis
power_analysis <- pwr.t2n.test(n1 = 400, d = 0.2, sig.level = 0.05, power = 0.8, alternative = "two.sided")
power_analysis
pwr.t.test(d = (0 - 10) / 16.03, power = .8, sig.level = .05, type = "two.sample", alternative = "two.sided")
cohen.ES(test = "t", size = "large")$effect.size
pwr.t.test(d = 0.8, power = 0.8, sig.level = 0.05, type = "two.sample", alternative = "two.sided")
effect_size <- c(cohen.ES(test = "r", size = "small")$effect.size, cohen.ES(test = "r", size = "medium")$effect.size, cohen.ES(test = "r", size = "large")$effect.size)
effect_size
pwr.t.test(d = effect_size, power = 0.8, sig.level = 0.05, type = "two.sample", alternative = "two.sided")
length(effect_size)
df_gender_mortality <- read.csv("Data/GenderMortality.csv", header = TRUE, na.strings = c("", "NA"), stringsAsFactors = FALSE)
str(df_gender_mortality)
t.test(df_gender_mortality)
? t.test
sim(is.na(df_gender_mortality$Male.Mortality.Count))
sum(is.na(df_gender_mortality$Male.Mortality.Count))
sum(is.na(df_gender_mortality$Female.Mortality.Count))
t.test(df_gender_mortality$Male.Mortality.Count, df_gender_mortality$Female.Mortality.Count, alternative = "two.sided", var.equal = FALSE)
t.test(df_gender_mortality$Male.Mortality.Count, df_gender_mortality$Female.Mortality.Count, alternative = "greater", var.equal = FALSE)
t.test(df_gender_mortality$Male.Mortality.Count, df_gender_mortality$Female.Mortality.Count, alternative = "two.sided", var.equal = FALSE)
?cor.test
power_analysis <- pwr.t.test(d = effect_size, power = 0.8, sig.level = 0.05, type = "two.sample", alternative = "two.sided")
power_analysis
plot(power_analysis)
effect_size <- cohen.ES(test = "t", size = "large")$effect.size
power_analysis <- pwr.t.test(d = effect_size, power = 0.8, sig.level = 0.05, type = "two.sample", alternative = "two.sided")
power_analysis
plot(power_analysis)
? t.test
library(dplyr)
head(df_gender_mortality)
sample_n(df_gender_mortality, 10)
power_analysis
t.test(df_sample$Male.Mortality.Count, df_sample$Female.Mortality.Count, alternative = "two.sided", var.equal = FALSE)
df_sample <- sample_n(df_gender_mortality, 26)
t.test(df_sample$Male.Mortality.Count, df_sample$Female.Mortality.Count, alternative = "two.sided", var.equal = FALSE)
power_analysis
power_analysis$n
round(power_analysis$n)
ggplot2(power_analysis)
library(ggplot2)
ggplot2(power_analysis)
boxplot(power_analysis)
t.test(df_sample$Male.Mortality.Count, df_sample$Female.Mortality.Count, type="two.sample", alternative = "two.sided", var.equal = FALSE)
t.test(df_sample$Male.Mortality.Count, df_sample$Female.Mortality.Count, alternative = "two.sided", var.equal = FALSE)
statistical_test <- t.test(df_sample$Male.Mortality.Count, df_sample$Female.Mortality.Count, alternative = "two.sided", var.equal = FALSE)
statistical_test
install.packages("pwr")
library(pwr) library(dplyr) # Get the effect size of t test effect_size <- cohen.ES(test = "t", size = "large")$effect.size effect_size # Perform power analysis to get the number of samples required power_analysis <- pwr.t.test(d = effect_size, power = 0.8, sig.level = 0.05, type = "two.sample", alternative = "two.sided") power_analysis round(power_analysis$n) # Plot the power analysis result plot(power_analysis) # Get the mortality count data set with Cause of death, Male mortality count and Female mortality count as the attributes. df_gender_mortality <- read.csv("Data/GenderMortality.csv", header = TRUE, na.strings = c("", "NA"), stringsAsFactors = FALSE) str(df_gender_mortality) # Get the random sample of data from the dataset based on the count from power analysis df_sample <- sample_n(df_gender_mortality, round(power_analysis$n)) # Perform statistical to get p value t.test(df_sample$Male.Mortality.Count, df_sample$Female.Mortality.Count, alternative = "two.sided", var.equal = FALSE)
